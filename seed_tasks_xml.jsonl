{"instruction": "the agent is instructed to navigate to a specific goal location. The behavior tree ensures that before computing a path to the goal, it clears both the local and global cost maps to ensure the path planning is based on the latest information. The goal location is set in the blackboard, and the agent then computes a path to that goal. This sequence of actions is repeated once.", "instances": [{"allowed_behaviors": "Nav2ClearLocalCostMap, Nav2ClearGlobalCostMap, SetBlackboard, Nav2ComputePathClient", "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"1\">\n            <Sequence>\n                <Nav2ClearLocalCostMap/>\n                <Nav2ClearGlobalCostMap/>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.7,-3.8\" />\n                <Nav2ComputePathClient goal=\"{Goal_a}\" />\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n</root>\n"}]}
{"instruction": "the agent is instructed to scan the environment, specifically focusing on nearby areas of the floor.", "instances": [{"allowed_behaviors": "Scan", "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Scan  name=\"scan\" mode=\"floor_near\"/>\n   </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent is instructed to perform a 'drop' action", "instances": [{"allowed_behaviors": "Drop", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Drop   name=\"drop\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"}]}
{"instruction": "the agent needs to move to a specified waypoint. It first retrieves the pose (position and orientation) of the waypoint, then simultaneously scans the environment and moves towards the retrieved pose. The agent continues scanning and moving until it successfully reaches the goal pose or encounters a failure.", "instances": [{"allowed_behaviors": "GetPoseFromWp, Scan, Move", "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"move\">\n        <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n        <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n          <Scan  name=\"scan\" mode=\"floor_near\"/>\n          <Move name=\"move\" goal=\"{pose}\"/>\n        </Parallel>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"}]}
{"instruction": "the agent attempts to move forward. If the laser check fails (indicating an obstacle), it switches to a fallback behavior. The fallback behavior involves moving backward for a duration of 3 time units and then turning for a duration of 4 time units. If both the backward and turn actions fail, the agent tries to move forward again.", "instances": [{"allowed_behaviors": "CheckLaser, Backward, Turn, Forward", "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <Fallback ID=\"Fallback\">\n        <CheckLaser name=\"check_laser\"/>\n        <Sequence>\n          <Backward name=\"backward\" duration=\"3\"/>\n          <Turn name=\"turn\" duration=\"4\"/>\n        </Sequence>\n      </Fallback>\n      <Forward name=\"forward\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>"}]}
{"instruction": "a task where the agent engages in a conversational process. Initially, it says 'start thinking...' then proceeds to think about what to say next. After determining the answer, it says it aloud. Additionally, it utilizes another action, \"SaySomething2\", to say a predefined message and also repeats the determined answer.", "instances": [{"allowed_behaviors": "SaySomething, ThinkWhatToSay, SaySomething2", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <SaySomething     message=\"start thinking...\" />\n           <ThinkWhatToSay   text=\"{the_answer}\"/>\n           <SaySomething     message=\"{the_answer}\" />\n           <SaySomething2    message=\"SaySomething2 works too...\" />\n           <SaySomething2    message=\"{the_answer}\" />\n       </Sequence>\n    </BehaviorTree>\n</root>"}]}
{"instruction": "a task where the agent approaches two objects consecutively. It first approaches Object A and then Object B in sequence. The task is completed when the agent successfully approaches both objects.", "instances": [{"allowed_behaviors": "ApproachObject", "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <ApproachObject name=\"action_A\" />\n            <ApproachObject name=\"action_B\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"}]}
{"instruction": "the agent is instructed to get the pose (position and orientation) from a waypoint specified by its ID. The obtained pose is stored in the variable '{pose}'", "instances": [{"allowed_behaviors": "GetPoseFromWp", "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n     <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n   </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent is instructed to approach an object", "instances": [{"allowed_behaviors": "ApproachObject", "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <ApproachObject name=\"approach_object\"/>\n        </Sequence>\n     </BehaviorTree>\n </root>\n"}]}
{"instruction": "search within a designated area for any objects of interest. It first retrieves a search pose within the specified search area. Then, it concurrently checks if any object is perceived or scans the nearby floor. Additionally, it moves within the search area. The search is considered successful if at least two out of the three actions succeed.", "instances": [{"allowed_behaviors": "GetSearchPose, isObjectPerceived, Scan, Move", "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"search\">\n        <GetSearchPose  name=\"get_search_pose\" location=\"search_area\" wp_pose=\"{pose}\"/>\n        <Parallel success_threshold=\"2\" failure_threshold=\"1\">\n          <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n            <isObjectPerceived name=\"is_object_perceived\" target=\"any\"/>\n            <Scan name=\"scan\" mode=\"floor_near\"/>\n          </Parallel>\n          <Move name=\"move\" goal=\"{pose}\"/>\n        </Parallel>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent calculates a goal position, prints it out, sets another goal position in the blackboard, and prints that as well. The sequence ensures that each action is executed in order, starting from calculating the goal position, printing it, setting the 'OtherGoal' in the blackboard, and finally printing the \"OtherGoal\" value.", "instances": [{"allowed_behaviors": "CalculateGoal, PrintTarget, SetBlackboard, PrintTarget", "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n            <CalculateGoal   goal=\"{GoalPosition}\" />\n            <PrintTarget     target=\"{GoalPosition}\" />\n            <SetBlackboard   output_key=\"OtherGoal\" value=\"-1;3\" />\n            <PrintTarget     target=\"{OtherGoal}\" />\n        </Sequence>\n     </BehaviorTree>\n </root>"}]}
{"instruction": "a continuous task where the agent repeatedly performs object detection. Within each cycle, it attempts to detect a person. If a person is detected with a confidence level of at least 85%, it performs a text-to-speech action saying 'Detected'. If no person is detected or the confidence level is below 85%, it performs a text-to-speech action saying 'Not Detected'. This process repeats for a large number of cycles (9999 in this case).", "instances": [{"allowed_behaviors": "ObjectDetectionAction, TextToSpeechActionClient", "output": "<root main_tree_to_execute=\"MainTree\">\n <BehaviorTree ID=\"MainTree\">\n  <Repeat num_cycles=\"9999\">\n   <Sequence>\n    <Fallback>\n     <Sequence>\n      <ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.85\" />\n      <TextToSpeechActionClient msg=\"Detected\" />\n     </Sequence>\n     <Sequence>\n      <TextToSpeechActionClient msg=\"Not Detected\" />\n     </Sequence>\n\n    </Fallback>\n   </Sequence>\n  </Repeat>\n </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent performs a series of actions related to interacting with an object. Firstly, it checks the battery status. Then, it opens the gripper, approaches an object, and finally closes the gripper. The task is completed once all actions within the sequence are successfully executed.", "instances": [{"allowed_behaviors": "CheckBattery, OpenGripper, ApproachObject, CloseGripper", "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery name=\"check_battery\" />\n            <OpenGripper name=\"open_gripper\" />\n            <ApproachObject name=\"actino_test\"/>\n            <CloseGripper name=\"close_gripper\" />\n        </Sequence>\n     </BehaviorTree>\n </root>"}]}
{"instruction": "the agent is instructed to move to a specified waypoint. It first retrieves the pose (position and orientation) of the waypoint, and then moves towards that pose. The task completes once the agent successfully reaches the goal pose.", "instances": [{"allowed_behaviors": "GetPoseFromWp, Move", "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"move\">\n        <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n        <Move name=\"move\" goal=\"{pose}\"/>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent performs two actions, Action A followed by Action B, in sequence. The task is completed when both actions are successfully executed in order.", "instances": [{"allowed_behaviors": "Action_A, Action_B", "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Action_A name=\"action_a\" />\n            <Action_B name=\"action_b\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"}]}
{"instruction": "a task where the agent performs a series of actions related to object manipulation. Initially, it checks the battery status, then opens the gripper, approaches an object, and finally closes the gripper.", "instances": [{"allowed_behaviors": "CheckBattery, OpenGripper, ApproachObject, CloseGripper", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <CheckBattery   name=\"check_battery\"/>\n           <OpenGripper    name=\"open_gripper\"/>\n           <ApproachObject name=\"approach_object\"/>\n           <CloseGripper   name=\"close_gripper\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent is instructed to move to two different locations sequentially. It first moves to the location with coordinates (-1, 2, 0), and once it reaches there, it proceeds to move to the location with coordinates (-3, 1, 0). The task completes once the agent successfully reaches both destinations in the specified order.", "instances": [{"allowed_behaviors": "MoveBase", "output": "<root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <MoveBase goal=\"-1;2;0\" />\n            <MoveBase goal=\"-3;1;0\" />\n            \n        </Sequence>\n     </BehaviorTree>\n</root>\n\n"}]}
{"instruction": "the agent is instructed to move to a specified goal location. The task completes once the agent successfully reaches the designated goal position.", "instances": [{"allowed_behaviors": "Move", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Move    name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"}]}
{"instruction": "the agent is instructed to pick up an object. It first selects an object to pick, retrieves its pose, and then tracks and approaches the object simultaneously. After a short wait, it retrieves the pose of the object again and then tracks and picks up the object in parallel.", "instances": [{"allowed_behaviors": "SelectPick, GetPickObject, GetPoseFromObject, Track, ApproachObject, Wait, GetPoseFromObject, Pick", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"pick\">\n            <SelectPick  name=\"select_pick\"/>\n            <GetPickObject  name=\"get_pick_object\" object_id=\"{object_id}\"/>\n            <GetPoseFromObject  name=\"get_pose_from_object\" object_id=\"{object_id}\" wp_pose=\"{pose}\"/>\n            <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                <Track name=\"pick\" pose=\"{pose}\" />\n                <ApproachObject name=\"approach_object\" object_pose=\"{pose}\"/>\n            </Parallel>\n            <Wait seconds=\"3\"/>\n            <GetPoseFromObject  name=\"get_pose_from_object\" object_id=\"{object_id}\" wp_pose=\"{pose}\"/>\n            <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                <Track name=\"pick\" pose=\"{pose}\" />\n                <Pick name=\"pick\" object_id=\"{object_id}\" object_pose=\"{pose}\"/>\n            </Parallel>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"}]}
{"instruction": "an agent is instructed to compute a path to a specified goal pose using a grid-based planner, and then follow that computed path using a designated path-following controller.", "instances": [{"allowed_behaviors": "ComputePathToPose, FollowPath", "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"}]}
{"instruction": "a task where the agent performs a series of actions related to pallet handling. Initially, it loads the pallet, then moves to a specified goal, and finally drops the pallet. The task completes once all actions within the sequence named 'root_sequence' are successfully executed in order.", "instances": [{"allowed_behaviors": "LoadPallet, Move, DropPallet", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <LoadPallet   name=\"load_pallet\"/>\n           <Move    name=\"move\" goal=\"${arg2}\"/>\n           <DropPallet    name=\"drop_pallet\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"}]}
{"instruction": "a continuous task where the agent repeatedly performs human pose detection. Within each cycle, it attempts to detect the expected poses for both left and right sides. If a pose is detected for the left side, it speaks 'Left' followed by the detected pose. If no pose is detected on the left side, it checks for the right side and speaks 'Right' followed by the detected pose. This process repeats for a large number of cycles (9999 in this case).", "instances": [{"allowed_behaviors": "HumanPoseDetect, TextToSpeechActionClient", "output": "<root main_tree_to_execute=\"MainTree\">\n <BehaviorTree ID=\"MainTree\">\n  <Repeat num_cycles=\"9999\">\n   <Sequence>\n    <Sequence>\n     <Fallback>\n      <Sequence>\n       <HumanPoseDetect expected_pose_left=\"\" expected_pose_right=\"\"\n        pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n      </Sequence>\n      <TextToSpeechActionClient msg=\"Left, \" msg2=\"{pose_left_speech}\" />\n     </Fallback>\n     <Fallback>\n      <Sequence>\n       <HumanPoseDetect expected_pose_left=\"\" expected_pose_right=\"\"\n        pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n      </Sequence>\n      <TextToSpeechActionClient msg=\"Right, \" msg2=\"{pose_right_speech}\" />\n     </Fallback>\n    </Sequence>\n   </Sequence>\n  </Repeat>\n </BehaviorTree>\n</root>\n"}]}
